#!/bin/bash

# Default action is to build and run
action="run"

# Check if a command line argument was provided
if [ $# -gt 0 ]; then
    action="$1"
fi

# Compile all Java files except test files
find Implementation -name "*.java" -not -name "*Test.java" | xargs javac

# Check if compilation was successful
if [ $? -eq 0 ]; then
    if [ "$action" == "jar" ]; then
        # Create a manifest file for the JAR
        echo "Main-Class: Implementation.MainMenu" > manifest.txt
        
        # Create the JAR file with all Java classes
        jar cfm GameApp.jar manifest.txt $(find . -name "*.class")
        
        # Add all resource files to the JAR
        jar uf GameApp.jar $(find Implementation -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.csv" \))
        
        # Clean up
        rm manifest.txt
        
        # Create a file listing all the resources we need to extract
        echo "Creating resource list..."
        find Implementation -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.csv" \) > resource_files.txt
        
        # Add the resource list to the JAR
        jar uf GameApp.jar resource_files.txt
        
        # Add a simple properties file for configuration
        echo "# Game configuration" > game.properties
        echo "# This file is generated by the build script" >> game.properties
        echo "# Modify the data.dir property to change where game data is stored" >> game.properties
        echo "data.dir=game_data" >> game.properties
        
        # Add the properties file to the JAR
        jar uf GameApp.jar game.properties
        
        # Create an advanced launcher script that ensures CSV files from the JAR can be written to
        cat > GameApp << 'EOF'
#!/bin/bash

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
JAR_PATH="$SCRIPT_DIR/GameApp.jar"

# Create persistent data directory next to the JAR file
DATA_DIR="$SCRIPT_DIR/game_data"
mkdir -p "$DATA_DIR"

# Create a unique temporary directory for non-data resources
TEMP_DIR="$SCRIPT_DIR/temp_resources_$(date +%s)"
mkdir -p "$TEMP_DIR"

echo "Setting up application environment..."

# Extract the resource list
cd "$TEMP_DIR" 
jar xf "$JAR_PATH" resource_files.txt
jar xf "$JAR_PATH" game.properties

if [ -f resource_files.txt ]; then
    echo "Resource list found. Creating directories and extracting files..."
    
    # First ensure all data directories exist and initialize CSV files if needed
    cat resource_files.txt | while read file; do
        if [[ $file == *.csv ]]; then
            # For CSV files, set up the data structure
            data_file_path="$DATA_DIR/$file"
            data_dir=$(dirname "$data_file_path")
            
            # Create directory structure in DATA_DIR
            mkdir -p "$data_dir"
            
            # Copy the CSV file to the data directory if it doesn't exist
            if [ ! -f "$data_file_path" ]; then
                # Extract the original CSV from the JAR
                jar xf "$JAR_PATH" "$file"
                # Initialize the data file
                cp "$file" "$data_file_path"
                # Remove the temporary copy
                rm "$file"
                echo "Initialized data file: $data_file_path"
            fi
        fi
    done
    
    # Now extract all non-CSV resources to the temp directory
    cat resource_files.txt | while read file; do
        if [[ $file != *.csv ]]; then
            # For non-CSV files, extract directly to temp directory
            jar xf "$JAR_PATH" "$file"
            echo "Extracted resource: $file"
        fi
    done
else
    echo "Resource list not found. Creating basic structure..."
    
    # Create basic structure in both temp and data directories
    mkdir -p "$TEMP_DIR/Implementation/Icons/{cat,dog,dragon}"
    mkdir -p "$TEMP_DIR/Implementation/PlayerInventory"
    mkdir -p "$DATA_DIR/Implementation"
    
    # Extract files from the JAR (excluding CSVs)
    jar xf "$JAR_PATH" Implementation
    
    # Move any extracted CSV files to the data directory
    find Implementation -name "*.csv" | while read csv_file; do
        data_file_path="$DATA_DIR/$csv_file"
        data_dir=$(dirname "$data_file_path")
        mkdir -p "$data_dir"
        
        # If the data file doesn't exist yet, initialize it
        if [ ! -f "$data_file_path" ]; then
            cp "$csv_file" "$data_file_path"
            echo "Initialized data file: $data_file_path"
        fi
        
        # Remove the temp copy
        rm "$csv_file"
    done
fi

# Set permissions to ensure files are writable
chmod -R 755 "$DATA_DIR"
find "$DATA_DIR" -type f -name "*.csv" -exec chmod 644 {} \;

# Run the application with data directory specified
echo "Starting application..."
cd "$TEMP_DIR"
java -Dapp.data.dir="$DATA_DIR" -jar "$JAR_PATH"

# Clean up when the application exits
echo "Cleaning up..."
cd "$SCRIPT_DIR"
rm -rf "$TEMP_DIR"
echo "Game completed. Data saved in: $DATA_DIR"
EOF

        # Create a backup script that can restore CSV files from the JAR if needed
        cat > ResetGameData << 'EOF'
#!/bin/bash

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
JAR_PATH="$SCRIPT_DIR/GameApp.jar"
DATA_DIR="$SCRIPT_DIR/game_data"

echo "WARNING: This will reset all game data to defaults."
echo "All saved progress will be lost."
read -p "Are you sure you want to reset all game data? (y/n) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Resetting game data..."
    
    # Create a temporary directory
    TEMP_DIR="$SCRIPT_DIR/temp_reset_$(date +%s)"
    mkdir -p "$TEMP_DIR"
    cd "$TEMP_DIR"
    
    # Extract resource list
    jar xf "$JAR_PATH" resource_files.txt
    
    if [ -f resource_files.txt ]; then
        cat resource_files.txt | while read file; do
            if [[ $file == *.csv ]]; then
                # Extract the CSV file
                jar xf "$JAR_PATH" "$file"
                
                # Create directory in data dir if needed
                data_file_path="$DATA_DIR/$file"
                data_dir=$(dirname "$data_file_path")
                mkdir -p "$data_dir"
                
                # Replace the data file
                cp "$file" "$data_file_path"
                echo "Reset: $file"
            fi
        done
    else
        echo "Could not find resource list in JAR."
        exit 1
    fi
    
    # Clean up
    cd "$SCRIPT_DIR"
    rm -rf "$TEMP_DIR"
    echo "Game data has been reset to default values."
else
    echo "Reset canceled."
fi
EOF

        # Make the scripts executable
        chmod +x GameApp
        chmod +x ResetGameData
        
        # Clean up
        rm resource_files.txt
        rm game.properties
        
        echo "Enhanced JAR file and launcher scripts created!"
        echo "You can run it with: ./GameApp"
        echo "CSV data will be preserved in the game_data directory."
        echo "If you need to reset your game data, run: ./ResetGameData"
    else
        # Run the application
        java Implementation.MainMenu
    fi
else
    echo "Compilation failed!"
fi 